services:
  # PostgreSQL Service
  postgres:
    image: postgres:16
    container_name: postgres_lms
    restart: always
    env_file:
      - ./back-end/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres

  # PgAdmin Service (For managing the database)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - ${PGADMIN_PORT:-5050}:80
    networks:
      - postgres
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: unless-stopped

  # Backend Service (NestJS)
  backend:
    build:
      context: .
      dockerfile: back-end/Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./back-end/.env
    volumes:
      - ./back-end:/app
      - backend_node_modules:/app/node_modules # Named volume for node_modules
    command: npm run start:dev
    depends_on:
      - postgres

  # Frontend Service (Next.js)
  frontend:
    build:
      context: .
      dockerfile: front-end/Dockerfile
    ports:
      - "3001:3000"
    env_file:
      - ./front-end/.env
    volumes:
      - ./front-end:/app
      - frontend_node_modules:/app/node_modules # Named volume for node_modules
    command: npm run dev
    depends_on:
      - backend

# Volumes for persistent storage
volumes:
  postgres_data:
    driver: local
  pgadmin:
    driver: local
  backend_node_modules: # Added volume for backend node_modules
  frontend_node_modules: # Added volume for frontend node_modules

# Networks for container communication
networks:
  postgres:
    driver: bridge